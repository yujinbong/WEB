-클로저
* 함수와 Lexical 환경의 조합, 함수가 생성될 당시의 외부 변수를 기억, 생성된 이후에도 계속 접근 가능
* 함수와 함수가 선언된 어휘적 환경의 조합이다. 클로저를 이해하려면 자바스크립트가 어떻게 변수의 유효범위를 지정하는지(Lexical scoping)를 먼저 이해해야 한다.
* 내부함수가 외부함수의 맥락(context)에 접근할 수 있는것을 가르킨다. 

어휘적 범위 지정(Lexical scoping)
Example1)

    function init() {
      var name = "Mozilla"; // name은 init에 의해 생성된 지역 변수이다.
      function displayName() { // displayName() 은 내부 함수이며, 클로저다.
        alert(name); // 부모 함수에서 선언된 변수를 사용한다.
      }
      displayName();
    }
    init();
    
init()은 지역 변수 name과 함수 displayName()을 생성한다. displayName()은 init() 안에 정의된 내부 함수이며 init() 함수 본문에서만 사용할 수 있다. 
여기서 주의할 점은 displayName() 내부엔 자신만의 지역 변수가 없다는 점이다. 
그런데 함수 내부에서 외부 함수의 변수에 접근할 수 있기 때문에 displayName() 역시 부모 함수 init()에서 선언된 변수 name에 접근할 수 있다. 
약 displayName()가 자신만의 name변수를 가지고 있었다면, name대신 this.name을 사용했을 것이다.
    
    
Example2)
function program(prog) {
    var p = prog;
    function student(name) {
       return "Student name: " + name + ", \nProgram: " + p;
    }
    return student;
 }
 
 var bsd_student = program("BSD"); // returns the inner function with an initial program value for prog
 var cpa_student = program("CPA");
 
 var john = bsd_student("John Smith");
 var dave = cpa_student("Dave Lee");
 
 var dave2 = program("BSD")("Jr. Dave Lee");
 
 console.log(john);
 console.log(dave);
 console.log(dave2);
 
 
 
 
 Example3)
 function makeAdder(x) {
    return function(y) {
      return x + y;
    };
  }
   
  var add5 = makeAdder(5);
  var add10 = makeAdder(10);
    
  console.log(add5(2));  // 7
  console.log(add10(2)); // 12
