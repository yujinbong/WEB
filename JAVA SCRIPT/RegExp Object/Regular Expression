정규 표현식은 문자열에 나타는 특정 문자 조합과 대응시키기 위해 사용되는 패턴입니다. 자바스크립트에서, 정규 표현식 또한 객체이다.
이 패턴들은 RegExp의 exec 메소드와 test 메소드 그리고 String의  match메소드,replace메소드,search메소드,split 메소드와 함께 쓰인다.

표현식   : var re = /ab+c/;

호출방법 : var re = new RegExp("ab+c");


Test Site:
https://regex101.com/
https://regexr.com/
https://regexper.com/




생성자 함수 방식
RegExp 생성자 함수를 호출하여 사용할 수 있습니다.

const regexp1 = new RegExp("^abc");
// new RegExg(표현식)

const regexp2 = new RegExp("^abc", "gi");
// new RegExg(표현식, 플래그)
리터럴(Literal) 방식
정규표현식은 /로 감싸진 패턴을 리터럴로 사용합니다.

const regexp1 = /^abc/;
// /표현식/

const regexp2 = /^abc/gi;
// /표현식/플래그
보통의 경우에는 리터럴 방식이 훨씬 편리합니다.
하지만 상황에 따라 RegExg 생성자 함수를 써야만 하는 경우도 있습니다.

재할당(Re-compile)
사용 중인 정규식을 재할당할 수 있습니다.
단 상수가 아닌 변수로 선언해야 합니다.

let regexp1 = /ipsum/g;
regexp1 = /lorem/i;

console.log(regexp1);
// /lorem/i

const regexp2 = /ipsum/g;
regexp2 = /lorem/i;  // TypeError
자바스크립트 속성
자바스크립트에는 정규표현식에서 제공하는 다양한 속성(Properties)이 있습니다.

속성	설명
flags	플래그(String) 반환, /^abc/gi.flags
source	표현식(String) 반환, /^abc/gi.source
global	플래그 g 여부(Boolean) 반환, /^abc/gi.global
ignoreCase	플래그 i 여부(Boolean) 반환
multiline	플래그 m 여부(Boolean) 반환
sticky	플래그 y 여부(Boolean) 반환
unicode	플래그 u 여부(Boolean) 반환
정규식에서 플래그만 추출할 경우 flags 속성을 유용하게 사용할 수 있습니다.
알파벳 순서대로 값이 반환됩니다.

new RegExp("^abc", "gi").flags;
// "gi"

/^abc/igy.flags;
// "giy"
표현식을 추출할 경우는 source 속성을 사용합니다.

new RegExp("^abc", "gi").source;
// "^abc"

/^abc/igy.source;
// "^abc"
플래그 포함 여부도 확인할 수 있습니다.

/^abc/igy.global;
// true

/^abc/igy.ignoreCase;
// true

/^abc/igy.unicode;
// false
자바스크립트 메소드
정규표현식을 다루는 다양한 메소드(Methods)들을 살펴봅시다.

메소드	문법	설명
exec	정규식.exec(문자열)	일치하는 하나의 정보(Array) 반환
test	정규식.test(문자열)	일치 여부(Boolean) 반환
match	문자열.match(정규식)	일치하는 문자열의 배열(Array) 반환
search	문자열.search(정규식)	일치하는 문자열의 인덱스(Number) 반환
replace	문자열.replace(정규식,대체문자)	일치하는 문자열을 대체하고 대체된 문자열(String) 반환
split	문자열.split(정규식)	일치하는 문자열을 분할하여 배열(Array)로 반환
toString	생성자_정규식.toString()	생성자 함수 방식의 정규식을 리터럴 방식의 문자열(String)로 반환
