====1. this의 첫번째 동작 방식은, this가 전역 객체(window)를 context 객체로 갖는다.

전역 스코프에서 정의한 변수들은 전역 객체에 등록된다. 
아래 예시에서는 this 객체에 프로퍼티(dummy1, dummy2)를 등록하는 것은 사실상 전역 스코프에서 변수를 선언한 것과 같다는것을 설명한다.
Example1)

var g = 20;
console.log(this.g); // 20

function doSomething() {
  this.dummy2 = "가을";
  console.log(this); // window 객체
}

console.log(this.dummy1); // undefined
console.log(this.dummy2); // undefined

this.dummy1 = "겨울";

console.log(this.dummy1); // 겨울
console.log(this.dummy2); // undefined

doSomething();

console.log(this.dummy1); // 겨울
console.log(this.dummy2); // 가을

====2. this의 두번째 동작 방식 - 암시적 바인딩.
어떤 객체를 통해 함수가 호출된다면 그 객체가 바로 this의 context 객체가 된다. 아래 예시에서는 
func1, func2는 obj를 통해 호출되었으므로, obj가 this가 된다는 뜻을 설명한다.

Example2)

function test() {
  console.log(this.a);
}

var obj = {
  a: 20,
  func1: test,
  func2: function() {
    console.log(this.a);
  }
};

obj.func1(); // 20
obj.func2(); // 20



