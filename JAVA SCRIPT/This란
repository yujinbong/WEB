1. this 란?
this는 일반적으로 메소드를 호출한 객체가 저장되어 있는 속성입니다.

function MyClass () {
    this.property1 = "value1";
}

MyClass.prototype.method1 = function() {
    console.log(this.property1);
}

var my1 = new MyClass();
my1.method1();


출처: https://beomy.tistory.com/6 [beomy] 



function User(name) {
  this.name = name;
  this.isAdmin = false;
}

let user = new User("보라");

alert(user.name); // 보라
alert(user.isAdmin); // false


function User(name) {
  // this = {};  (빈 객체가 암시적으로 만들어짐)

  // 새로운 프로퍼티를 this에 추가함
  this.name = name;
  this.isAdmin = false;

  // return this;  (this가 암시적으로 반환됨)
}


이제 let user = new User("보라")는 아래 코드를 입력한 것과 동일하게 동작하게된다.

let user = {
  name: "보라",
  isAdmin: false
};

==
new User("보라")이외에도 new User("호진"), new User("지민") 등을 이용하면 손쉽게 사용자 객체를 만들 수 있다. 
객체 리터럴 문법으로 일일이 객체를 만드는 방법보다 훨씬 간단하고 읽기 쉽게 객체를 만들 수 있게 된다.
생성자의 의의는 바로 여기에 있다. 재사용할 수 있는 객체 생성 코드를 구현하는 것.,

*이름의 '첫 글자가 대문자’인 함수는 new를 붙여 실행하고 모든 함수는 생성자 함수가 될 수 있다는 점을 잊지 말자!
 new를 붙여 실행한다면 어떤 함수라도 위에 언급된 알고리즘이 실행된다.


https://ko.javascript.info/constructor-new


